// Generated file. Do not edit.

def localProperties = new Properties()
def localPropertiesFile = new File(buildscript.sourceFile.parentFile.parentFile, 'local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.library'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply from:"./mvn.gradle"

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    //添加任务
    project.tasks.whenTaskAdded { Task theTask ->
        if (theTask.name == 'assembleRelease') {
            theTask.dependsOn(collectAarTask)            // 编译完apk之后再执行自定义task
        }
    }
}

/**
 * 收集flutter module以及plugin的aar
 */
task collectAarTask(type: Copy){
    println 'delete begin------------'
    delete '../../aar'
    println 'delete end------------'

    println "copy begin--------------"
    File pluginsFile = new File(project.projectDir.parentFile.parentFile, '.flutter-plugins')
    Properties plugins = readPropertiesIfExist(pluginsFile)

    plugins.each { name, _ ->
        String path = plugins.get(name)
        String aarPath = path+"android/build/outputs/aar/$name-release.aar"
        println aarPath
        from aarPath
    }
    from 'build/outputs/aar/flutter-release.aar'
    into '../../aar'

    println "copy end-------------------"

}

private static Properties readPropertiesIfExist(File propertiesFile) {
    Properties result = new Properties()
    if (propertiesFile.exists()) {
        propertiesFile.withReader('UTF-8') { reader -> result.load(reader) }
    }
    return result
}

//collectAarTask.dependsOn deleteOldAar

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:support-v13:27.1.1'
    implementation 'com.android.support:support-annotations:27.1.1'
}
